# Pre-commit configuration for RottenStocks
# Install with: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python formatting and linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.6
    hooks:
      # Run the linter
      - id: ruff
        args: ['--fix', '--exit-non-zero-on-fix']
        files: '^backend/.*\.py$'
      # Run the formatter
      - id: ruff-format
        files: '^backend/.*\.py$'

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        files: '^backend/.*\.py$'
        additional_dependencies: 
          - types-requests
          - types-redis
        args: ['--ignore-missing-imports', '--strict-optional']

  # Python security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        files: '^backend/.*\.py$'
        args: ['-r', 'backend/', '-f', 'json', '-o', 'bandit-report.json']
        exclude: '^backend/tests/.*$'

  # JavaScript/TypeScript formatting and linting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: '^frontend/.*\.(js|jsx|ts|tsx|json|css|scss|md)$'
        exclude: '^frontend/(dist|build|node_modules)/.*$'

  # ESLint for JavaScript/TypeScript
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.55.0
    hooks:
      - id: eslint
        files: '^frontend/.*\.(js|jsx|ts|tsx)$'
        exclude: '^frontend/(dist|build|node_modules)/.*$'
        additional_dependencies:
          - eslint@8.55.0
          - '@typescript-eslint/eslint-plugin@6.13.1'
          - '@typescript-eslint/parser@6.13.1'
          - 'eslint-plugin-react@7.33.2'
          - 'eslint-plugin-react-hooks@4.6.0'

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: '\.(yaml|yml)$'
        exclude: '^\.github/.*$'

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        files: 'Dockerfile.*'

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        files: '\.(sh|bash)$'

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        files: '\.md$'
        exclude: '^\.github/.*\.md$'
        args: ['--config', '.markdownlint.json']

  # Environment file validation
  - repo: local
    hooks:
      - id: env-validation
        name: Environment Validation
        entry: python scripts/env-validator.py
        language: system
        files: '^\.env.*$'
        pass_filenames: false

  # Custom hooks for project-specific checks
  - repo: local
    hooks:
      - id: no-debug-statements
        name: Check for debug statements
        entry: bash -c 'if grep -r "console\.log\|debugger\|pdb\.set_trace\|import pdb" --include="*.py" --include="*.js" --include="*.ts" --include="*.tsx" backend/ frontend/ 2>/dev/null; then echo "Found debug statements in code"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: check-api-keys
        name: Check for hardcoded API keys
        entry: bash -c 'if grep -r -E "(api_key|secret_key|password).*(=|:).*(\"|\047)[a-zA-Z0-9]{10,}" --include="*.py" --include="*.js" --include="*.ts" --include="*.tsx" backend/ frontend/ 2>/dev/null; then echo "Found potential hardcoded API keys"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: check-todo-fixme
        name: Check for TODO/FIXME comments
        entry: bash -c 'if grep -r -i "todo\|fixme" --include="*.py" --include="*.js" --include="*.ts" --include="*.tsx" backend/ frontend/ 2>/dev/null; then echo "Found TODO/FIXME comments - consider creating issues"; exit 0; fi'
        language: system
        pass_filenames: false

# Configuration for specific tools
default_language_version:
  python: python3.11
  node: 18.18.0

# Global excludes
exclude: |
  (?x)^(
    .*\.min\.(js|css)$|
    .*\/dist\/.*|
    .*\/build\/.*|
    .*\/node_modules\/.*|
    .*\/__pycache__\/.*|
    .*\.pyc$|
    \.git\/.*
  )$

# Fail fast - stop on first failure
fail_fast: false

# Minimum pre-commit version required
minimum_pre_commit_version: 3.5.0