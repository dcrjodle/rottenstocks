openapi: 3.0.3
info:
  title: RottenStocks API
  description: |
    API for RottenStocks - A stock rating platform that provides dual sentiment ratings 
    (expert and popular opinion) similar to Rotten Tomatoes for movies.
    
    ## API Key Management
    
    ### Development Environment
    - API keys are stored in `.env` file (never committed to git)
    - `.env.example` provides template with all required keys
    - Keys are loaded using python-dotenv package
    
    ### Production Environment
    - API keys stored in environment variables
    - Use secret management service (AWS Secrets Manager, HashiCorp Vault, etc.)
    - Keys rotated regularly with zero-downtime deployment
    
    ### Key Storage Format
    ```
    # External APIs
    REDDIT_CLIENT_ID=your_reddit_client_id
    REDDIT_CLIENT_SECRET=your_reddit_client_secret
    REDDIT_USER_AGENT=RottenStocks/1.0 by YourUsername
    
    ALPHA_VANTAGE_API_KEY=your_alpha_vantage_key
    
    GOOGLE_GEMINI_API_KEY=your_gemini_api_key
    
    # Internal
    JWT_SECRET_KEY=your_jwt_secret
    DATABASE_URL=postgresql://user:pass@localhost/rottenstocks
    REDIS_URL=redis://localhost:6379
    ```
    
    ### Key Retrieval in Code
    ```python
    from pydantic_settings import BaseSettings
    
    class Settings(BaseSettings):
        reddit_client_id: str
        reddit_client_secret: str
        reddit_user_agent: str
        
        class Config:
            env_file = ".env"
    ```
    
  version: 1.0.0
  contact:
    name: RottenStocks Support
    email: support@rottenstocks.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.rottenstocks.com
    description: Production server

tags:
  - name: stocks
    description: Stock information and ratings
  - name: ratings
    description: Expert and popular ratings
  - name: social
    description: Social media sentiment data
  - name: auth
    description: Authentication endpoints
  - name: watchlist
    description: User watchlist management

paths:
  /api/v1/stocks:
    get:
      tags:
        - stocks
      summary: List all stocks
      description: Returns paginated list of stocks with current ratings
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort
          in: query
          schema:
            type: string
            enum: [rating_desc, rating_asc, name, symbol, popular_score, expert_score]
            default: rating_desc
        - name: sector
          in: query
          schema:
            type: string
            example: Technology
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StockSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        429:
          $ref: '#/components/responses/RateLimitExceeded'

  /api/v1/stocks/{symbol}:
    get:
      tags:
        - stocks
      summary: Get stock details
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
            example: AAPL
      responses:
        200:
          description: Stock details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockDetail'
        404:
          $ref: '#/components/responses/NotFound'

  /api/v1/stocks/{symbol}/rating:
    get:
      tags:
        - ratings
      summary: Get current rating for a stock
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Current rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        404:
          $ref: '#/components/responses/NotFound'

  /api/v1/stocks/{symbol}/rating/history:
    get:
      tags:
        - ratings
      summary: Get rating history
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
        - name: period
          in: query
          schema:
            type: string
            enum: [1d, 1w, 1m, 3m, 1y]
            default: 1m
      responses:
        200:
          description: Rating history
          content:
            application/json:
              schema:
                type: object
                properties:
                  symbol:
                    type: string
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/RatingHistoryPoint'

  /api/v1/social/reddit/posts:
    get:
      tags:
        - social
      summary: Get Reddit posts for analysis
      description: |
        Fetches posts from specific finance-related subreddits.
        
        **Target Subreddits** (starting small):
        - r/wallstreetbets
        - r/stocks
        - r/investing
        - r/StockMarket
        - r/SecurityAnalysis
        
        **Reddit API Integration**:
        - Uses Reddit OAuth2 for authentication
        - Respects rate limits: 60 requests per minute
        - Fetches top/hot/new posts with stock symbol mentions
        - Filters by minimum score for quality
      parameters:
        - name: symbol
          in: query
          required: true
          schema:
            type: string
            example: AAPL
        - name: subreddit
          in: query
          schema:
            type: string
            enum: [wallstreetbets, stocks, investing, StockMarket, SecurityAnalysis, all]
            default: all
        - name: time_filter
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
            maximum: 100
      responses:
        200:
          description: Reddit posts mentioning the stock
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/RedditPost'
                  metadata:
                    type: object
                    properties:
                      total_posts:
                        type: integer
                      subreddits_searched:
                        type: array
                        items:
                          type: string
                      fetch_timestamp:
                        type: string
                        format: date-time

  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    default: bearer
                  user:
                    $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'

  /api/v1/watchlist:
    get:
      tags:
        - watchlist
      summary: Get user's watchlist
      security:
        - bearerAuth: []
      responses:
        200:
          description: User's watchlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  stocks:
                    type: array
                    items:
                      $ref: '#/components/schemas/WatchlistItem'
        401:
          $ref: '#/components/responses/Unauthorized'
    
    post:
      tags:
        - watchlist
      summary: Add stock to watchlist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - symbol
              properties:
                symbol:
                  type: string
                  example: AAPL
      responses:
        201:
          description: Stock added to watchlist
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    StockSummary:
      type: object
      properties:
        symbol:
          type: string
          example: AAPL
        name:
          type: string
          example: Apple Inc.
        sector:
          type: string
          example: Technology
        current_price:
          type: number
          format: float
          example: 150.25
        price_change_percent:
          type: number
          format: float
          example: 2.35
        expert_score:
          type: integer
          minimum: 0
          maximum: 100
          example: 85
        popular_score:
          type: integer
          minimum: 0
          maximum: 100
          example: 72
        overall_sentiment:
          type: string
          enum: [BUY, HOLD, SELL]
          example: BUY
    
    StockDetail:
      allOf:
        - $ref: '#/components/schemas/StockSummary'
        - type: object
          properties:
            market_cap:
              type: number
              format: float
              example: 2500000000000
            volume:
              type: integer
              example: 45678901
            high_52w:
              type: number
              format: float
            low_52w:
              type: number
              format: float
            description:
              type: string
            last_updated:
              type: string
              format: date-time
    
    Rating:
      type: object
      properties:
        stock_symbol:
          type: string
        expert_score:
          type: integer
          minimum: 0
          maximum: 100
        popular_score:
          type: integer
          minimum: 0
          maximum: 100
        expert_sentiment:
          type: string
          enum: [BUY, HOLD, SELL]
        popular_sentiment:
          type: string
          enum: [BUY, HOLD, SELL]
        expert_post_count:
          type: integer
          description: Number of expert posts analyzed
        popular_post_count:
          type: integer
          description: Number of popular posts analyzed
        confidence_level:
          type: string
          enum: [HIGH, MEDIUM, LOW]
          description: Based on volume and quality of data
        last_calculated:
          type: string
          format: date-time
        breakdown:
          type: object
          properties:
            expert_sources:
              type: array
              items:
                type: object
                properties:
                  source:
                    type: string
                  sentiment:
                    type: string
                  influence_weight:
                    type: number
            popular_sources:
              type: object
              properties:
                reddit:
                  type: object
                  properties:
                    positive:
                      type: integer
                    negative:
                      type: integer
                    neutral:
                      type: integer
    
    RatingHistoryPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        expert_score:
          type: integer
        popular_score:
          type: integer
        volume_analyzed:
          type: integer
    
    RedditPost:
      type: object
      properties:
        id:
          type: string
          example: t3_abc123
        subreddit:
          type: string
          example: wallstreetbets
        title:
          type: string
        author:
          type: string
        content:
          type: string
          description: Post text content (selftext)
        score:
          type: integer
          description: Reddit score (upvotes - downvotes)
        num_comments:
          type: integer
        created_utc:
          type: integer
          description: Unix timestamp
        url:
          type: string
        permalink:
          type: string
        awards:
          type: integer
          description: Number of awards received
        upvote_ratio:
          type: number
          format: float
          minimum: 0
          maximum: 1
        mentioned_symbols:
          type: array
          items:
            type: string
          description: Stock symbols found in post
        preliminary_sentiment:
          type: string
          enum: [POSITIVE, NEGATIVE, NEUTRAL, MIXED]
          description: Quick sentiment based on keywords (before AI analysis)
    
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        created_at:
          type: string
          format: date-time
    
    WatchlistItem:
      type: object
      properties:
        symbol:
          type: string
        name:
          type: string
        added_at:
          type: string
          format: date-time
        price_when_added:
          type: number
          format: float
        current_price:
          type: number
          format: float
        price_change_percent:
          type: number
          format: float
        expert_score:
          type: integer
        popular_score:
          type: integer
    
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        total_pages:
          type: integer
        total_items:
          type: integer
        items_per_page:
          type: integer
        has_next:
          type: boolean
        has_previous:
          type: boolean
    
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          format: uuid

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: BAD_REQUEST
            message: Invalid request parameters
            
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: UNAUTHORIZED
            message: Invalid or missing authentication
            
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: NOT_FOUND
            message: Stock symbol not found
            
    RateLimitExceeded:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in time window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp when limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: RATE_LIMIT_EXCEEDED
            message: Too many requests. Please retry after some time.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from login endpoint.
        Example: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR...