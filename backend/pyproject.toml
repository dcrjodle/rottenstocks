[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rottenstocks-backend"
version = "1.0.0"
description = "RottenStocks Backend API - Stock sentiment analysis platform"
authors = [
    {name = "RottenStocks Team", email = "team@rottenstocks.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["fastapi", "stocks", "sentiment-analysis", "finance", "api"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]

dependencies = [
    # Core FastAPI and ASGI
    "fastapi[all]>=0.104.1,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    
    # Database
    "sqlalchemy[asyncio]>=2.0.23,<2.1.0",
    "asyncpg>=0.29.0,<0.30.0",
    "alembic>=1.12.1,<1.13.0",
    
    # Redis and Caching
    "redis[hiredis]>=5.0.1,<5.1.0",
    "python-redis-cache>=0.1.4,<0.2.0",
    
    # HTTP Client and External APIs
    "httpx>=0.25.2,<0.26.0",
    "aiohttp>=3.9.1,<3.10.0",
    
    # Reddit API
    "asyncpraw>=7.7.1,<7.8.0",
    
    # Google Gemini API
    "google-generativeai>=0.3.1,<0.4.0",
    
    # Authentication and Security
    "python-jose[cryptography]>=3.3.0,<3.4.0",
    "passlib[bcrypt]>=1.7.4,<1.8.0",
    "python-multipart>=0.0.6,<0.1.0",
    
    # Configuration and Environment
    "pydantic>=2.5.0,<2.6.0",
    "pydantic-settings>=2.1.0,<2.2.0",
    "python-dotenv>=1.0.0,<1.1.0",
    
    # Data Validation and Serialization
    "email-validator>=2.1.0,<2.2.0",
    
    # Background Tasks
    "celery[redis]>=5.3.4,<5.4.0",
    
    # Monitoring and Logging
    "structlog>=23.2.0,<23.3.0",
    "rich>=13.7.0,<13.8.0",
    
    # Utilities
    "python-dateutil>=2.8.2,<2.9.0",
    "pytz>=2023.3",
    "click>=8.1.7,<8.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3,<7.5.0",
    "pytest-asyncio>=0.21.1,<0.22.0",
    "pytest-cov>=4.1.0,<4.2.0",
    "pytest-mock>=3.12.0,<3.13.0",
    "httpx>=0.25.2,<0.26.0",  # For testing async HTTP
    
    # Code Quality
    "ruff>=0.1.6,<0.2.0",
    "mypy>=1.7.1,<1.8.0",
    "bandit[toml]>=1.7.5,<1.8.0",
    
    # Development Tools
    "pre-commit>=3.5.0,<3.6.0",
    "ipython>=8.17.2,<8.18.0",
    "ipdb>=0.13.13,<0.14.0",
    
    # Documentation
    "mkdocs>=1.5.3,<1.6.0",
    "mkdocs-material>=9.4.8,<9.5.0",
    
    # Database Tools
    "psycopg2-binary>=2.9.9,<2.10.0",  # For database debugging
]

test = [
    "pytest>=7.4.3,<7.5.0",
    "pytest-asyncio>=0.21.1,<0.22.0",
    "pytest-cov>=4.1.0,<4.2.0",
    "pytest-mock>=3.12.0,<3.13.0",
    "factory-boy>=3.3.0,<3.4.0",
    "faker>=20.1.0,<20.2.0",
]

prod = [
    "gunicorn>=21.2.0,<21.3.0",
    "sentry-sdk[fastapi]>=1.38.0,<1.39.0",
    "prometheus-client>=0.19.0,<0.20.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/rottenstocks"
Repository = "https://github.com/yourusername/rottenstocks"
Documentation = "https://github.com/yourusername/rottenstocks/docs"
"Bug Tracker" = "https://github.com/yourusername/rottenstocks/issues"

[project.scripts]
rottenstocks-server = "app.main:run_server"
rottenstocks-worker = "app.tasks.worker:run_worker"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S104",   # hardcoded bind all interfaces
    "S105",   # hardcoded password string
    "S106",   # hardcoded password function argument
    "S107",   # hardcoded password default argument
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PT011",  # pytest.raises without match
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S311", "PLR2004", "ARG001", "ARG002"]
"alembic/*" = ["I001"]
"scripts/*" = ["T201"]

[tool.ruff.isort]
known-first-party = ["app"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "redis", "celery"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = [
    "asyncpraw.*",
    "google.generativeai.*",
    "celery.*",
    "redis.*",
    "structlog.*",
    "rich.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "7.4"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "external: marks tests that require external services",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]