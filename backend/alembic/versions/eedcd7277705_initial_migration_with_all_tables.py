"""Initial migration with all tables

Revision ID: eedcd7277705
Revises: 
Create Date: 2025-07-03 22:02:21.988480

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'eedcd7277705'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade database schema.
    
    Apply migration changes to upgrade the database schema.
    This function should contain all forward migration logic.
    
    Safety checks:
    - Always use transactions for schema changes
    - Test migrations on a copy of production data first
    - Ensure all constraints can be satisfied
    - Consider impact on large tables
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('experts',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Expert or institution name'),
    sa.Column('title', sa.String(length=255), nullable=True, comment='Professional title or role'),
    sa.Column('institution', sa.String(length=255), nullable=True, comment='Institution or company name'),
    sa.Column('bio', sa.Text(), nullable=True, comment='Expert biography or description'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='Contact email'),
    sa.Column('website', sa.String(length=500), nullable=True, comment='Professional website or profile URL'),
    sa.Column('linkedin_url', sa.String(length=500), nullable=True, comment='LinkedIn profile URL'),
    sa.Column('twitter_handle', sa.String(length=100), nullable=True, comment='Twitter handle (without @)'),
    sa.Column('years_experience', sa.Integer(), nullable=True, comment='Years of experience in financial analysis'),
    sa.Column('specializations', sa.Text(), nullable=True, comment='Areas of specialization (JSON array of sectors/industries)'),
    sa.Column('certifications', sa.Text(), nullable=True, comment='Professional certifications (CFA, CPA, etc.)'),
    sa.Column('total_ratings', sa.Integer(), nullable=False, comment='Total number of ratings provided'),
    sa.Column('accuracy_score', sa.Float(), nullable=True, comment='Historical accuracy score (0.0 to 1.0)'),
    sa.Column('avg_rating_score', sa.Float(), nullable=True, comment='Average rating score given by this expert'),
    sa.Column('follower_count', sa.Integer(), nullable=False, comment='Number of followers/subscribers'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Whether the expert is verified by our platform'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the expert is currently active'),
    sa.Column('verification_date', sa.DateTime(timezone=True), nullable=True, comment='Date when expert was verified'),
    sa.Column('id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_experts_accuracy', 'experts', ['accuracy_score'], unique=False)
    op.create_index('idx_experts_active', 'experts', ['is_active'], unique=False)
    op.create_index('idx_experts_institution', 'experts', ['institution'], unique=False)
    op.create_index('idx_experts_name', 'experts', ['name'], unique=False)
    op.create_index('idx_experts_reputation', 'experts', ['is_verified', 'accuracy_score', 'total_ratings'], unique=False)
    op.create_index('idx_experts_total_ratings', 'experts', ['total_ratings'], unique=False)
    op.create_index('idx_experts_verified', 'experts', ['is_verified'], unique=False)
    op.create_index('idx_experts_verified_active', 'experts', ['is_verified', 'is_active'], unique=False)
    op.create_table('stocks',
    sa.Column('symbol', sa.String(length=10), nullable=False, comment='Stock ticker symbol (e.g., AAPL, GOOGL)'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Company name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Company description'),
    sa.Column('exchange', sa.String(length=10), nullable=False, comment='Stock exchange (NYSE, NASDAQ, etc.)'),
    sa.Column('sector', sa.String(length=100), nullable=True, comment='Market sector'),
    sa.Column('industry', sa.String(length=100), nullable=True, comment='Industry classification'),
    sa.Column('market_cap', sa.Numeric(precision=20, scale=2), nullable=True, comment='Market capitalization in USD'),
    sa.Column('current_price', sa.Numeric(precision=12, scale=4), nullable=True, comment='Current stock price'),
    sa.Column('previous_close', sa.Numeric(precision=12, scale=4), nullable=True, comment='Previous trading day close price'),
    sa.Column('day_high', sa.Numeric(precision=12, scale=4), nullable=True, comment="Day's high price"),
    sa.Column('day_low', sa.Numeric(precision=12, scale=4), nullable=True, comment="Day's low price"),
    sa.Column('volume', sa.Integer(), nullable=True, comment='Trading volume'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the stock is actively tracked'),
    sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True, comment='Last time stock data was updated'),
    sa.Column('id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_stocks_active', 'stocks', ['is_active'], unique=False)
    op.create_index('idx_stocks_active_updated', 'stocks', ['is_active', 'last_updated'], unique=False)
    op.create_index('idx_stocks_exchange', 'stocks', ['exchange'], unique=False)
    op.create_index('idx_stocks_exchange_sector', 'stocks', ['exchange', 'sector'], unique=False)
    op.create_index('idx_stocks_sector', 'stocks', ['sector'], unique=False)
    op.create_index('idx_stocks_symbol', 'stocks', ['symbol'], unique=False)
    op.create_index('idx_stocks_updated', 'stocks', ['last_updated'], unique=False)
    op.create_index(op.f('ix_stocks_symbol'), 'stocks', ['symbol'], unique=True)
    op.create_table('ratings',
    sa.Column('stock_id', sa.UUID(as_uuid=False), nullable=False, comment='Reference to the stock being rated'),
    sa.Column('expert_id', sa.UUID(as_uuid=False), nullable=True, comment='Reference to expert who provided rating (null for popular ratings)'),
    sa.Column('rating_type', sa.Enum('EXPERT', 'POPULAR', 'HISTORICAL', name='ratingtype'), nullable=False, comment='Type of rating (expert, popular, historical)'),
    sa.Column('score', sa.Numeric(precision=3, scale=2), nullable=False, comment='Rating score from 0.00 to 5.00 (like Rotten Tomatoes)'),
    sa.Column('recommendation', sa.Enum('STRONG_BUY', 'BUY', 'HOLD', 'SELL', 'STRONG_SELL', name='recommendationtype'), nullable=False, comment='Buy/sell recommendation'),
    sa.Column('confidence', sa.Numeric(precision=3, scale=2), nullable=True, comment='Confidence level in the rating (0.00 to 1.00)'),
    sa.Column('price_target', sa.Numeric(precision=12, scale=4), nullable=True, comment='Price target for the stock'),
    sa.Column('price_at_rating', sa.Numeric(precision=12, scale=4), nullable=True, comment='Stock price when rating was made'),
    sa.Column('summary', sa.Text(), nullable=True, comment='Brief summary of the rating rationale'),
    sa.Column('analysis', sa.Text(), nullable=True, comment='Detailed analysis supporting the rating'),
    sa.Column('risks', sa.Text(), nullable=True, comment='Key risks identified'),
    sa.Column('catalysts', sa.Text(), nullable=True, comment='Potential catalysts for price movement'),
    sa.Column('rating_date', sa.DateTime(timezone=True), nullable=False, comment='Date when rating was issued'),
    sa.Column('expiry_date', sa.DateTime(timezone=True), nullable=True, comment='Date when rating expires'),
    sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True, comment='Date when rating was last updated'),
    sa.Column('sample_size', sa.Integer(), nullable=True, comment='Number of social posts/opinions aggregated (for popular ratings)'),
    sa.Column('sentiment_sources', sa.String(length=500), nullable=True, comment='Sources used for sentiment analysis (Reddit, Twitter, etc.)'),
    sa.Column('id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['expert_id'], ['experts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['stock_id'], ['stocks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ratings_date', 'ratings', ['rating_date'], unique=False)
    op.create_index('idx_ratings_expert', 'ratings', ['expert_id'], unique=False)
    op.create_index('idx_ratings_expert_date', 'ratings', ['expert_id', 'rating_date'], unique=False)
    op.create_index('idx_ratings_recommendation', 'ratings', ['recommendation'], unique=False)
    op.create_index('idx_ratings_score', 'ratings', ['score'], unique=False)
    op.create_index('idx_ratings_stock', 'ratings', ['stock_id'], unique=False)
    op.create_index('idx_ratings_stock_date', 'ratings', ['stock_id', 'rating_date'], unique=False)
    op.create_index('idx_ratings_stock_type', 'ratings', ['stock_id', 'rating_type'], unique=False)
    op.create_index('idx_ratings_type', 'ratings', ['rating_type'], unique=False)
    op.create_index('idx_ratings_type_score', 'ratings', ['rating_type', 'score'], unique=False)
    op.create_table('social_posts',
    sa.Column('stock_id', sa.UUID(as_uuid=False), nullable=False, comment='Reference to the stock mentioned in the post'),
    sa.Column('platform', sa.Enum('REDDIT', 'TWITTER', 'STOCKTWITS', 'DISCORD', 'OTHER', name='platform'), nullable=False, comment='Social media platform where post originated'),
    sa.Column('platform_post_id', sa.String(length=255), nullable=False, comment='Unique post ID from the platform'),
    sa.Column('url', sa.String(length=1000), nullable=True, comment='Direct URL to the post'),
    sa.Column('author_username', sa.String(length=255), nullable=True, comment='Username of the post author'),
    sa.Column('author_id', sa.String(length=255), nullable=True, comment='Platform-specific author ID'),
    sa.Column('author_follower_count', sa.Integer(), nullable=True, comment='Number of followers the author has'),
    sa.Column('title', sa.String(length=500), nullable=True, comment='Post title (for Reddit posts, forum posts, etc.)'),
    sa.Column('content', sa.Text(), nullable=False, comment='Full text content of the post'),
    sa.Column('content_excerpt', sa.String(length=500), nullable=True, comment='Shortened excerpt for display'),
    sa.Column('score', sa.Integer(), nullable=True, comment='Platform-specific score (Reddit upvotes, Twitter likes, etc.)'),
    sa.Column('upvotes', sa.Integer(), nullable=True, comment='Number of upvotes (Reddit)'),
    sa.Column('downvotes', sa.Integer(), nullable=True, comment='Number of downvotes (Reddit)'),
    sa.Column('comment_count', sa.Integer(), nullable=True, comment='Number of comments/replies'),
    sa.Column('share_count', sa.Integer(), nullable=True, comment='Number of shares/retweets'),
    sa.Column('sentiment_type', sa.Enum('VERY_POSITIVE', 'POSITIVE', 'NEUTRAL', 'NEGATIVE', 'VERY_NEGATIVE', name='sentimenttype'), nullable=True, comment='Categorized sentiment analysis result'),
    sa.Column('sentiment_score', sa.Numeric(precision=3, scale=2), nullable=True, comment='Sentiment score from 0.00 (very negative) to 1.00 (very positive)'),
    sa.Column('sentiment_confidence', sa.Numeric(precision=3, scale=2), nullable=True, comment='Confidence in sentiment analysis (0.00 to 1.00)'),
    sa.Column('mentions_count', sa.Integer(), nullable=False, comment='Number of times the stock is mentioned in the post'),
    sa.Column('has_financial_data', sa.Boolean(), nullable=False, comment='Whether post contains financial data or analysis'),
    sa.Column('contains_prediction', sa.Boolean(), nullable=False, comment='Whether post contains price predictions'),
    sa.Column('subreddit', sa.String(length=100), nullable=True, comment='Reddit subreddit (for Reddit posts)'),
    sa.Column('hashtags', sa.Text(), nullable=True, comment='Hashtags mentioned in the post (JSON array)'),
    sa.Column('posted_at', sa.DateTime(timezone=True), nullable=False, comment='When the post was originally created'),
    sa.Column('collected_at', sa.DateTime(timezone=True), nullable=False, comment='When we collected/scraped this post'),
    sa.Column('analyzed_at', sa.DateTime(timezone=True), nullable=True, comment='When sentiment analysis was performed'),
    sa.Column('id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['stock_id'], ['stocks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_social_posts_author', 'social_posts', ['author_username'], unique=False)
    op.create_index('idx_social_posts_collected', 'social_posts', ['collected_at'], unique=False)
    op.create_index('idx_social_posts_platform', 'social_posts', ['platform'], unique=False)
    op.create_index('idx_social_posts_platform_posted', 'social_posts', ['platform', 'posted_at'], unique=False)
    op.create_index('idx_social_posts_posted', 'social_posts', ['posted_at'], unique=False)
    op.create_index('idx_social_posts_score', 'social_posts', ['sentiment_score'], unique=False)
    op.create_index('idx_social_posts_sentiment', 'social_posts', ['sentiment_type'], unique=False)
    op.create_index('idx_social_posts_sentiment_posted', 'social_posts', ['sentiment_type', 'posted_at'], unique=False)
    op.create_index('idx_social_posts_stock', 'social_posts', ['stock_id'], unique=False)
    op.create_index('idx_social_posts_stock_platform', 'social_posts', ['stock_id', 'platform'], unique=False)
    op.create_index('idx_social_posts_stock_posted', 'social_posts', ['stock_id', 'posted_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema.
    
    Revert migration changes to downgrade the database schema.
    This function should contain all backward migration logic.
    
    Safety checks:
    - Ensure downgrade doesn't cause data loss
    - Test downgrade path thoroughly
    - Consider if data migration is needed
    - Document any irreversible changes
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_social_posts_stock_posted', table_name='social_posts')
    op.drop_index('idx_social_posts_stock_platform', table_name='social_posts')
    op.drop_index('idx_social_posts_stock', table_name='social_posts')
    op.drop_index('idx_social_posts_sentiment_posted', table_name='social_posts')
    op.drop_index('idx_social_posts_sentiment', table_name='social_posts')
    op.drop_index('idx_social_posts_score', table_name='social_posts')
    op.drop_index('idx_social_posts_posted', table_name='social_posts')
    op.drop_index('idx_social_posts_platform_posted', table_name='social_posts')
    op.drop_index('idx_social_posts_platform', table_name='social_posts')
    op.drop_index('idx_social_posts_collected', table_name='social_posts')
    op.drop_index('idx_social_posts_author', table_name='social_posts')
    op.drop_table('social_posts')
    op.drop_index('idx_ratings_type_score', table_name='ratings')
    op.drop_index('idx_ratings_type', table_name='ratings')
    op.drop_index('idx_ratings_stock_type', table_name='ratings')
    op.drop_index('idx_ratings_stock_date', table_name='ratings')
    op.drop_index('idx_ratings_stock', table_name='ratings')
    op.drop_index('idx_ratings_score', table_name='ratings')
    op.drop_index('idx_ratings_recommendation', table_name='ratings')
    op.drop_index('idx_ratings_expert_date', table_name='ratings')
    op.drop_index('idx_ratings_expert', table_name='ratings')
    op.drop_index('idx_ratings_date', table_name='ratings')
    op.drop_table('ratings')
    op.drop_index(op.f('ix_stocks_symbol'), table_name='stocks')
    op.drop_index('idx_stocks_updated', table_name='stocks')
    op.drop_index('idx_stocks_symbol', table_name='stocks')
    op.drop_index('idx_stocks_sector', table_name='stocks')
    op.drop_index('idx_stocks_exchange_sector', table_name='stocks')
    op.drop_index('idx_stocks_exchange', table_name='stocks')
    op.drop_index('idx_stocks_active_updated', table_name='stocks')
    op.drop_index('idx_stocks_active', table_name='stocks')
    op.drop_table('stocks')
    op.drop_index('idx_experts_verified_active', table_name='experts')
    op.drop_index('idx_experts_verified', table_name='experts')
    op.drop_index('idx_experts_total_ratings', table_name='experts')
    op.drop_index('idx_experts_reputation', table_name='experts')
    op.drop_index('idx_experts_name', table_name='experts')
    op.drop_index('idx_experts_institution', table_name='experts')
    op.drop_index('idx_experts_active', table_name='experts')
    op.drop_index('idx_experts_accuracy', table_name='experts')
    op.drop_table('experts')
    # ### end Alembic commands ###
